import java.util.*;
class GraphDFS {
   
   public static void dfs(int node, boolean vis[], ArrayList<ArrayList<Integer>> adj, 
    ArrayList<Integer> ls) {
        
        //marking current node as visited
        vis[node] = true;
        ls.add(node);
        
        //getting neighbour nodes
        for(Integer it: adj.get(node)) {
            if(vis[it] == false) {
                dfs(it, vis, adj, ls);
            }
        }
    }
    
    // Function to return a list containing the DFS traversal of the graph.
    public static ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        //boolean array to keep track of visited vertices
        boolean vis[] = new boolean[V+1];
        vis[0] = true; 
        ArrayList<Integer> ls = new ArrayList<>();
        dfs(0, vis, adj, ls); 
        return ls; 
    }
   
    public static void main(String[] args) {
        //Preparing Adjcency List
      ArrayList<ArrayList<Integer>> adjList = new ArrayList<>(5);
      for(int i=0; i<5; i++){
          adjList.add(new ArrayList<Integer>());
      }
      //undirected Graph 
      //adj.get(u(source)).add(v(destination))
      //adj.get(v(destination)).add(u(source))
      
        adjList.get(0).add(1);
        adjList.get(1).add(0); 
        adjList.get(0).add(4);
        adjList.get(4).add(0);
        adjList.get(1).add(2);
        adjList.get(2).add(1);
        adjList.get(1).add(3);
        adjList.get(3).add(1);
        
        ArrayList < Integer > ans = dfsOfGraph(5, adjList);
        for(Integer it: ans){
            System.out.println(it);
        }
        //Time Complexity: For an undirected graph, O(N) + O(2E), For a directed graph, O(N) + O(E), Because for every node we are calling the recursive function once, the time taken is O(N) and 2E is for total degrees as we traverse for all adjacent nodes.

        //Space Complexity: O(3N) ~ O(N), Space for dfs stack space, visited array and an adjacency list.
    }
}