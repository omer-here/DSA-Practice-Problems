DFS using Stack, it works on DAG(Directed Acyclic Graphs) only. and it says that source(u) should always comes before the destination(v) in linear order.

import java.util.*;
class TopoSort {
   
  public static void dfs(int node, int vis[], Stack<Integer> st,
            ArrayList<ArrayList<Integer>> adj) {
        vis[node] = 1;
        for (int it : adj.get(node)) {
            if (vis[it] == 0)
                dfs(it, vis, st, adj);
        }
        st.push(node);
    }

    // Function to return list containing vertices in Topological order.
    public static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
        int vis[] = new int[V];
        Stack<Integer> st = new Stack<Integer>();
        for (int i = 0; i < V; i++) {
            if (vis[i] == 0) {
                dfs(i, vis, st, adj);
            }
        }

        int ans[] = new int[V];
        int i = 0;
        while (!st.isEmpty()) {
            ans[i++] = st.peek();
            st.pop();
        }
        return ans;
    }

   
    public static void main(String[] args) {
        //Preparing Adjcency List
      ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
      for(int i=0; i<6; i++){
          adjList.add(new ArrayList<Integer>());
      }
      //undirected Graph 
      //adj.get(u(source)).add(v(destination))
      //adj.get(v(destination)).add(u(source))
      
        adjList.get(2).add(3);
        adjList.get(3).add(1);
        adjList.get(4).add(0);
        adjList.get(4).add(1);
        adjList.get(5).add(0);
        adjList.get(5).add(2);
        
        int[] ans = topoSort(5, adjList);
        for(Integer it: ans){
            System.out.println(it);
        }

    }
}