Given a Binary Tree, return true if it is a Balanced Binary Tree else return false. A Binary Tree is balanced if, for all nodes in the tree, the difference between left and right subtree height is not more than 1.

import java.util.*;
class BalancedBinaryTree {
    
    public static class Node {
        public int key; 
        public Node right;
        public Node left;
        
    // Constructor to initialize
    // the node with a value
        Node(int val) {
            key = val;
            left = null;
            right = null;
        }
    }
    
    public static int Lheight(Node root){
        if(root == null){
            return 0;
        }
        int leftHeight = Lheight(root.left);
        return 1 + leftHeight;
    }
    
    public static int Rheight(Node root){
        if(root == null){
            return 0;
        }
        int rightHeight = Rheight(root.left);
        return 1 + rightHeight;
    }
    
    public static boolean CheckBalanced(Node root){
        int lh = Lheight(root);
        int rh = Rheight(root);
        if(lh - rh <= 1)
            return true;
        
        return false;
    }
    
   
    public static void main(String[] args) {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        
        // int height = maxDepth2(root);
        System.out.println(CheckBalanced(root));
        
        
    }
}